/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace TokenLocker {
  export type LockDataStruct = {
    amount: BigNumberish;
    weeksToUnlock: BigNumberish;
  };

  export type LockDataStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    weeksToUnlock: BigNumber;
  };

  export type ExtendLockDataStruct = {
    amount: BigNumberish;
    currentWeeks: BigNumberish;
    newWeeks: BigNumberish;
  };

  export type ExtendLockDataStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    currentWeeks: BigNumber;
    newWeeks: BigNumber;
  };
}

export interface PrismaLockerInterface extends utils.Interface {
  functions: {
    "MAX_LOCK_WEEKS()": FunctionFragment;
    "PRISMA_CORE()": FunctionFragment;
    "allowPenaltyWithdrawAfter()": FunctionFragment;
    "deploymentManager()": FunctionFragment;
    "extendLock(uint256,uint256,uint256)": FunctionFragment;
    "extendMany((uint256,uint256,uint256)[])": FunctionFragment;
    "freeze()": FunctionFragment;
    "getAccountActiveLocks(address,uint256)": FunctionFragment;
    "getAccountBalances(address)": FunctionFragment;
    "getAccountWeight(address)": FunctionFragment;
    "getAccountWeightAt(address,uint256)": FunctionFragment;
    "getAccountWeightWrite(address)": FunctionFragment;
    "getTotalWeight()": FunctionFragment;
    "getTotalWeightAt(uint256)": FunctionFragment;
    "getTotalWeightWrite()": FunctionFragment;
    "getWeek()": FunctionFragment;
    "getWithdrawWithPenaltyAmounts(address,uint256)": FunctionFragment;
    "guardian()": FunctionFragment;
    "incentiveVoter()": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "lockMany(address,(uint256,uint256)[])": FunctionFragment;
    "lockToTokenRatio()": FunctionFragment;
    "lockToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "penaltyWithdrawalsEnabled()": FunctionFragment;
    "prismaCore()": FunctionFragment;
    "setAllowPenaltyWithdrawAfter(uint256)": FunctionFragment;
    "setPenaltyWithdrawalsEnabled(bool)": FunctionFragment;
    "totalDecayRate()": FunctionFragment;
    "totalUpdatedWeek()": FunctionFragment;
    "unfreeze(bool)": FunctionFragment;
    "withdrawExpiredLocks(uint256)": FunctionFragment;
    "withdrawWithPenalty(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_LOCK_WEEKS"
      | "PRISMA_CORE"
      | "allowPenaltyWithdrawAfter"
      | "deploymentManager"
      | "extendLock"
      | "extendMany"
      | "freeze"
      | "getAccountActiveLocks"
      | "getAccountBalances"
      | "getAccountWeight"
      | "getAccountWeightAt"
      | "getAccountWeightWrite"
      | "getTotalWeight"
      | "getTotalWeightAt"
      | "getTotalWeightWrite"
      | "getWeek"
      | "getWithdrawWithPenaltyAmounts"
      | "guardian"
      | "incentiveVoter"
      | "lock"
      | "lockMany"
      | "lockToTokenRatio"
      | "lockToken"
      | "owner"
      | "penaltyWithdrawalsEnabled"
      | "prismaCore"
      | "setAllowPenaltyWithdrawAfter"
      | "setPenaltyWithdrawalsEnabled"
      | "totalDecayRate"
      | "totalUpdatedWeek"
      | "unfreeze"
      | "withdrawExpiredLocks"
      | "withdrawWithPenalty"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_LOCK_WEEKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRISMA_CORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowPenaltyWithdrawAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendLock",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendMany",
    values: [TokenLocker.ExtendLockDataStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountActiveLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWeightAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWeightWrite",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWeightAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWeightWrite",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWeek", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWithdrawWithPenaltyAmounts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incentiveVoter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockMany",
    values: [string, TokenLocker.LockDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockToTokenRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyWithdrawalsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prismaCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowPenaltyWithdrawAfter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyWithdrawalsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDecayRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUpdatedWeek",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unfreeze", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "withdrawExpiredLocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithPenalty",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_LOCK_WEEKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRISMA_CORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowPenaltyWithdrawAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extendLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extendMany", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountActiveLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWeightAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWeightWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWeightAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWeightWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWeek", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawWithPenaltyAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentiveVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockToTokenRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyWithdrawalsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prismaCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowPenaltyWithdrawAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyWithdrawalsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUpdatedWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithPenalty",
    data: BytesLike
  ): Result;

  events: {
    "LockCreated(address,uint256,uint256)": EventFragment;
    "LockExtended(address,uint256,uint256,uint256)": EventFragment;
    "LocksCreated(address,(uint256,uint256)[])": EventFragment;
    "LocksExtended(address,(uint256,uint256,uint256)[])": EventFragment;
    "LocksFrozen(address,uint256)": EventFragment;
    "LocksUnfrozen(address,uint256)": EventFragment;
    "LocksWithdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocksCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocksExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocksFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocksUnfrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocksWithdrawn"): EventFragment;
}

export interface LockCreatedEventObject {
  account: string;
  amount: BigNumber;
  _weeks: BigNumber;
}
export type LockCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LockCreatedEventObject
>;

export type LockCreatedEventFilter = TypedEventFilter<LockCreatedEvent>;

export interface LockExtendedEventObject {
  account: string;
  amount: BigNumber;
  _weeks: BigNumber;
  newWeeks: BigNumber;
}
export type LockExtendedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LockExtendedEventObject
>;

export type LockExtendedEventFilter = TypedEventFilter<LockExtendedEvent>;

export interface LocksCreatedEventObject {
  account: string;
  newLocks: TokenLocker.LockDataStructOutput[];
}
export type LocksCreatedEvent = TypedEvent<
  [string, TokenLocker.LockDataStructOutput[]],
  LocksCreatedEventObject
>;

export type LocksCreatedEventFilter = TypedEventFilter<LocksCreatedEvent>;

export interface LocksExtendedEventObject {
  account: string;
  locks: TokenLocker.ExtendLockDataStructOutput[];
}
export type LocksExtendedEvent = TypedEvent<
  [string, TokenLocker.ExtendLockDataStructOutput[]],
  LocksExtendedEventObject
>;

export type LocksExtendedEventFilter = TypedEventFilter<LocksExtendedEvent>;

export interface LocksFrozenEventObject {
  account: string;
  amount: BigNumber;
}
export type LocksFrozenEvent = TypedEvent<
  [string, BigNumber],
  LocksFrozenEventObject
>;

export type LocksFrozenEventFilter = TypedEventFilter<LocksFrozenEvent>;

export interface LocksUnfrozenEventObject {
  account: string;
  amount: BigNumber;
}
export type LocksUnfrozenEvent = TypedEvent<
  [string, BigNumber],
  LocksUnfrozenEventObject
>;

export type LocksUnfrozenEventFilter = TypedEventFilter<LocksUnfrozenEvent>;

export interface LocksWithdrawnEventObject {
  account: string;
  withdrawn: BigNumber;
  penalty: BigNumber;
}
export type LocksWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LocksWithdrawnEventObject
>;

export type LocksWithdrawnEventFilter = TypedEventFilter<LocksWithdrawnEvent>;

export interface PrismaLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrismaLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_LOCK_WEEKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRISMA_CORE(overrides?: CallOverrides): Promise<[string]>;

    allowPenaltyWithdrawAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    deploymentManager(overrides?: CallOverrides): Promise<[string]>;

    extendLock(
      _amount: BigNumberish,
      _weeks: BigNumberish,
      _newWeeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    extendMany(
      newExtendLocks: TokenLocker.ExtendLockDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    freeze(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccountActiveLocks(
      account: string,
      minWeeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [TokenLocker.LockDataStructOutput[], BigNumber] & {
        lockData: TokenLocker.LockDataStructOutput[];
        frozenAmount: BigNumber;
      }
    >;

    getAccountBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlocked: BigNumber }
    >;

    getAccountWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountWeightAt(
      account: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountWeightWrite(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getTotalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalWeightAt(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalWeightWrite(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getWeek(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { week: BigNumber }>;

    getWithdrawWithPenaltyAmounts(
      account: string,
      amountToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountWithdrawn: BigNumber;
        penaltyAmountPaid: BigNumber;
      }
    >;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    incentiveVoter(overrides?: CallOverrides): Promise<[string]>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockMany(
      _account: string,
      newLocks: TokenLocker.LockDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockToTokenRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    penaltyWithdrawalsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    prismaCore(overrides?: CallOverrides): Promise<[string]>;

    setAllowPenaltyWithdrawAfter(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPenaltyWithdrawalsEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalDecayRate(overrides?: CallOverrides): Promise<[number]>;

    totalUpdatedWeek(overrides?: CallOverrides): Promise<[number]>;

    unfreeze(
      keepIncentivesVote: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawExpiredLocks(
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawWithPenalty(
      amountToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAX_LOCK_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

  PRISMA_CORE(overrides?: CallOverrides): Promise<string>;

  allowPenaltyWithdrawAfter(overrides?: CallOverrides): Promise<BigNumber>;

  deploymentManager(overrides?: CallOverrides): Promise<string>;

  extendLock(
    _amount: BigNumberish,
    _weeks: BigNumberish,
    _newWeeks: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  extendMany(
    newExtendLocks: TokenLocker.ExtendLockDataStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  freeze(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccountActiveLocks(
    account: string,
    minWeeks: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [TokenLocker.LockDataStructOutput[], BigNumber] & {
      lockData: TokenLocker.LockDataStructOutput[];
      frozenAmount: BigNumber;
    }
  >;

  getAccountBalances(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { locked: BigNumber; unlocked: BigNumber }
  >;

  getAccountWeight(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountWeightAt(
    account: string,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountWeightWrite(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalWeightAt(
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalWeightWrite(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getWeek(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawWithPenaltyAmounts(
    account: string,
    amountToWithdraw: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountWithdrawn: BigNumber;
      penaltyAmountPaid: BigNumber;
    }
  >;

  guardian(overrides?: CallOverrides): Promise<string>;

  incentiveVoter(overrides?: CallOverrides): Promise<string>;

  lock(
    _account: string,
    _amount: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockMany(
    _account: string,
    newLocks: TokenLocker.LockDataStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockToTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

  lockToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  penaltyWithdrawalsEnabled(overrides?: CallOverrides): Promise<boolean>;

  prismaCore(overrides?: CallOverrides): Promise<string>;

  setAllowPenaltyWithdrawAfter(
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPenaltyWithdrawalsEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalDecayRate(overrides?: CallOverrides): Promise<number>;

  totalUpdatedWeek(overrides?: CallOverrides): Promise<number>;

  unfreeze(
    keepIncentivesVote: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawExpiredLocks(
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawWithPenalty(
    amountToWithdraw: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_LOCK_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    PRISMA_CORE(overrides?: CallOverrides): Promise<string>;

    allowPenaltyWithdrawAfter(overrides?: CallOverrides): Promise<BigNumber>;

    deploymentManager(overrides?: CallOverrides): Promise<string>;

    extendLock(
      _amount: BigNumberish,
      _weeks: BigNumberish,
      _newWeeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extendMany(
      newExtendLocks: TokenLocker.ExtendLockDataStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    freeze(overrides?: CallOverrides): Promise<void>;

    getAccountActiveLocks(
      account: string,
      minWeeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [TokenLocker.LockDataStructOutput[], BigNumber] & {
        lockData: TokenLocker.LockDataStructOutput[];
        frozenAmount: BigNumber;
      }
    >;

    getAccountBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlocked: BigNumber }
    >;

    getAccountWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWeightAt(
      account: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWeightWrite(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalWeightAt(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWeightWrite(overrides?: CallOverrides): Promise<BigNumber>;

    getWeek(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawWithPenaltyAmounts(
      account: string,
      amountToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountWithdrawn: BigNumber;
        penaltyAmountPaid: BigNumber;
      }
    >;

    guardian(overrides?: CallOverrides): Promise<string>;

    incentiveVoter(overrides?: CallOverrides): Promise<string>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockMany(
      _account: string,
      newLocks: TokenLocker.LockDataStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockToTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

    lockToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    penaltyWithdrawalsEnabled(overrides?: CallOverrides): Promise<boolean>;

    prismaCore(overrides?: CallOverrides): Promise<string>;

    setAllowPenaltyWithdrawAfter(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPenaltyWithdrawalsEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDecayRate(overrides?: CallOverrides): Promise<number>;

    totalUpdatedWeek(overrides?: CallOverrides): Promise<number>;

    unfreeze(
      keepIncentivesVote: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawExpiredLocks(
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawWithPenalty(
      amountToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LockCreated(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      _weeks?: null
    ): LockCreatedEventFilter;
    LockCreated(
      account?: string | null,
      amount?: null,
      _weeks?: null
    ): LockCreatedEventFilter;

    "LockExtended(address,uint256,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      _weeks?: null,
      newWeeks?: null
    ): LockExtendedEventFilter;
    LockExtended(
      account?: string | null,
      amount?: null,
      _weeks?: null,
      newWeeks?: null
    ): LockExtendedEventFilter;

    "LocksCreated(address,(uint256,uint256)[])"(
      account?: string | null,
      newLocks?: null
    ): LocksCreatedEventFilter;
    LocksCreated(
      account?: string | null,
      newLocks?: null
    ): LocksCreatedEventFilter;

    "LocksExtended(address,(uint256,uint256,uint256)[])"(
      account?: string | null,
      locks?: null
    ): LocksExtendedEventFilter;
    LocksExtended(
      account?: string | null,
      locks?: null
    ): LocksExtendedEventFilter;

    "LocksFrozen(address,uint256)"(
      account?: string | null,
      amount?: null
    ): LocksFrozenEventFilter;
    LocksFrozen(account?: string | null, amount?: null): LocksFrozenEventFilter;

    "LocksUnfrozen(address,uint256)"(
      account?: string | null,
      amount?: null
    ): LocksUnfrozenEventFilter;
    LocksUnfrozen(
      account?: string | null,
      amount?: null
    ): LocksUnfrozenEventFilter;

    "LocksWithdrawn(address,uint256,uint256)"(
      account?: string | null,
      withdrawn?: null,
      penalty?: null
    ): LocksWithdrawnEventFilter;
    LocksWithdrawn(
      account?: string | null,
      withdrawn?: null,
      penalty?: null
    ): LocksWithdrawnEventFilter;
  };

  estimateGas: {
    MAX_LOCK_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    PRISMA_CORE(overrides?: CallOverrides): Promise<BigNumber>;

    allowPenaltyWithdrawAfter(overrides?: CallOverrides): Promise<BigNumber>;

    deploymentManager(overrides?: CallOverrides): Promise<BigNumber>;

    extendLock(
      _amount: BigNumberish,
      _weeks: BigNumberish,
      _newWeeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    extendMany(
      newExtendLocks: TokenLocker.ExtendLockDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    freeze(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getAccountActiveLocks(
      account: string,
      minWeeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWeightAt(
      account: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWeightWrite(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalWeightAt(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWeightWrite(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getWeek(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawWithPenaltyAmounts(
      account: string,
      amountToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveVoter(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lockMany(
      _account: string,
      newLocks: TokenLocker.LockDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lockToTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

    lockToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyWithdrawalsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    prismaCore(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowPenaltyWithdrawAfter(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPenaltyWithdrawalsEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    totalUpdatedWeek(overrides?: CallOverrides): Promise<BigNumber>;

    unfreeze(
      keepIncentivesVote: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawExpiredLocks(
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawWithPenalty(
      amountToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LOCK_WEEKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRISMA_CORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowPenaltyWithdrawAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploymentManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendLock(
      _amount: BigNumberish,
      _weeks: BigNumberish,
      _newWeeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    extendMany(
      newExtendLocks: TokenLocker.ExtendLockDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    freeze(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccountActiveLocks(
      account: string,
      minWeeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWeightAt(
      account: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWeightWrite(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getTotalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalWeightAt(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalWeightWrite(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawWithPenaltyAmounts(
      account: string,
      amountToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentiveVoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockMany(
      _account: string,
      newLocks: TokenLocker.LockDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockToTokenRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyWithdrawalsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prismaCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowPenaltyWithdrawAfter(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPenaltyWithdrawalsEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalDecayRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUpdatedWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unfreeze(
      keepIncentivesVote: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawExpiredLocks(
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawWithPenalty(
      amountToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
