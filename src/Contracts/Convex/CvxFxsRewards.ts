/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace CvxFxsStaking {
  export type EarnedDataStruct = { token: string; amount: BigNumberish };

  export type EarnedDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface CvxFxsRewardsInterface extends utils.Interface {
  functions: {
    "addReward(address,address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveRewardDistributor(address,address,bool)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimableRewards(address)": FunctionFragment;
    "cvxfxs()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,bool)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "fxs()": FunctionFragment;
    "fxsDepositor()": FunctionFragment;
    "getReward(address,address)": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getRewardForDuration(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "name()": FunctionFragment;
    "notifyRewardAmount(address,uint256)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "rewardData(address)": FunctionFragment;
    "rewardDistributors(address,address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardRedirect(address)": FunctionFragment;
    "rewardTokenLength()": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "setRewardRedirect(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeAll()": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userRewardPerTokenPaid(address,address)": FunctionFragment;
    "vefxsProxy()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReward"
      | "allowance"
      | "approve"
      | "approveRewardDistributor"
      | "balanceOf"
      | "claimableRewards"
      | "cvxfxs"
      | "decimals"
      | "decreaseAllowance"
      | "deposit(uint256,bool)"
      | "deposit(uint256)"
      | "fxs"
      | "fxsDepositor"
      | "getReward(address,address)"
      | "getReward(address)"
      | "getRewardForDuration"
      | "increaseAllowance"
      | "lastTimeRewardApplicable"
      | "name"
      | "notifyRewardAmount"
      | "recoverERC20"
      | "rewardData"
      | "rewardDistributors"
      | "rewardPerToken"
      | "rewardRedirect"
      | "rewardTokenLength"
      | "rewardTokens"
      | "rewards"
      | "rewardsDuration"
      | "setRewardRedirect"
      | "stake"
      | "stakeAll"
      | "stakeFor"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "userRewardPerTokenPaid"
      | "vefxsProxy"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cvxfxs", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,bool)",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fxs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fxsDepositor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address,address)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rewardData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRedirect",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRedirect",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakeAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vefxsProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxfxs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fxsDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRedirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRedirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vefxsProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardAdded(address,uint256)": EventFragment;
    "RewardAdded(address,address)": EventFragment;
    "RewardDistributorApproved(address,address)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "RewardRedirected(address,address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardAdded(address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardAdded(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributorApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRedirected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface RecoveredEventObject {
  _token: string;
  _amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  RecoveredEventObject
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RewardAdded_address_uint256_EventObject {
  _token: string;
  _reward: BigNumber;
}
export type RewardAdded_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  RewardAdded_address_uint256_EventObject
>;

export type RewardAdded_address_uint256_EventFilter =
  TypedEventFilter<RewardAdded_address_uint256_Event>;

export interface RewardAdded_address_address_EventObject {
  _reward: string;
  _distributor: string;
}
export type RewardAdded_address_address_Event = TypedEvent<
  [string, string],
  RewardAdded_address_address_EventObject
>;

export type RewardAdded_address_address_EventFilter =
  TypedEventFilter<RewardAdded_address_address_Event>;

export interface RewardDistributorApprovedEventObject {
  _reward: string;
  _distributor: string;
}
export type RewardDistributorApprovedEvent = TypedEvent<
  [string, string],
  RewardDistributorApprovedEventObject
>;

export type RewardDistributorApprovedEventFilter =
  TypedEventFilter<RewardDistributorApprovedEvent>;

export interface RewardPaidEventObject {
  _user: string;
  _rewardsToken: string;
  _reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardRedirectedEventObject {
  _account: string;
  _forward: string;
}
export type RewardRedirectedEvent = TypedEvent<
  [string, string],
  RewardRedirectedEventObject
>;

export type RewardRedirectedEventFilter =
  TypedEventFilter<RewardRedirectedEvent>;

export interface StakedEventObject {
  _user: string;
  _amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawnEventObject {
  _user: string;
  _amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface CvxFxsRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CvxFxsRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [CvxFxsStaking.EarnedDataStructOutput[]] & {
        userRewards: CvxFxsStaking.EarnedDataStructOutput[];
      }
    >;

    cvxfxs(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256,bool)"(
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fxs(overrides?: CallOverrides): Promise<[string]>;

    fxsDepositor(overrides?: CallOverrides): Promise<[string]>;

    "getReward(address,address)"(
      _address: string,
      _forwardTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "getReward(address)"(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardRedirect(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    rewardTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewardRedirect(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vefxsProxy(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addReward(
    _rewardsToken: string,
    _distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveRewardDistributor(
    _rewardsToken: string,
    _distributor: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimableRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<CvxFxsStaking.EarnedDataStructOutput[]>;

  cvxfxs(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256,bool)"(
    _amount: BigNumberish,
    _lock: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fxs(overrides?: CallOverrides): Promise<string>;

  fxsDepositor(overrides?: CallOverrides): Promise<string>;

  "getReward(address,address)"(
    _address: string,
    _forwardTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "getReward(address)"(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRewardForDuration(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    _rewardsToken: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverERC20(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardDistributors(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardPerToken(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardRedirect(arg0: string, overrides?: CallOverrides): Promise<string>;

  rewardTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardRedirect(
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeFor(
    _for: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vefxsProxy(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<CvxFxsStaking.EarnedDataStructOutput[]>;

    cvxfxs(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deposit(uint256,bool)"(
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fxs(overrides?: CallOverrides): Promise<string>;

    fxsDepositor(overrides?: CallOverrides): Promise<string>;

    "getReward(address,address)"(
      _address: string,
      _forwardTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "getReward(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRedirect(arg0: string, overrides?: CallOverrides): Promise<string>;

    rewardTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardRedirect(_to: string, overrides?: CallOverrides): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeAll(overrides?: CallOverrides): Promise<void>;

    stakeFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxsProxy(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Recovered(address,uint256)"(
      _token?: null,
      _amount?: null
    ): RecoveredEventFilter;
    Recovered(_token?: null, _amount?: null): RecoveredEventFilter;

    "RewardAdded(address,uint256)"(
      _token?: string | null,
      _reward?: null
    ): RewardAdded_address_uint256_EventFilter;
    "RewardAdded(address,address)"(
      _reward?: string | null,
      _distributor?: string | null
    ): RewardAdded_address_address_EventFilter;

    "RewardDistributorApproved(address,address)"(
      _reward?: string | null,
      _distributor?: string | null
    ): RewardDistributorApprovedEventFilter;
    RewardDistributorApproved(
      _reward?: string | null,
      _distributor?: string | null
    ): RewardDistributorApprovedEventFilter;

    "RewardPaid(address,address,uint256)"(
      _user?: string | null,
      _rewardsToken?: string | null,
      _reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      _user?: string | null,
      _rewardsToken?: string | null,
      _reward?: null
    ): RewardPaidEventFilter;

    "RewardRedirected(address,address)"(
      _account?: string | null,
      _forward?: null
    ): RewardRedirectedEventFilter;
    RewardRedirected(
      _account?: string | null,
      _forward?: null
    ): RewardRedirectedEventFilter;

    "Staked(address,uint256)"(
      _user?: string | null,
      _amount?: null
    ): StakedEventFilter;
    Staked(_user?: string | null, _amount?: null): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdrawn(address,uint256)"(
      _user?: string | null,
      _amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(_user?: string | null, _amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cvxfxs(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256,bool)"(
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fxs(overrides?: CallOverrides): Promise<BigNumber>;

    fxsDepositor(overrides?: CallOverrides): Promise<BigNumber>;

    "getReward(address,address)"(
      _address: string,
      _forwardTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "getReward(address)"(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRedirect(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardRedirect(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    stakeFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxsProxy(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cvxfxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,bool)"(
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxsDepositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReward(address,address)"(
      _address: string,
      _forwardTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "getReward(address)"(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRedirect(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardRedirect(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxsProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
