/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace PirexCvxConvex {
  export type ConvexRewardStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type ConvexRewardStructOutput = [string, BigNumber, BigNumber] & {
    token: string;
    amount: BigNumber;
    balance: BigNumber;
  };
}

export declare namespace PirexCvx {
  export type EmergencyMigrationStruct = {
    recipient: PromiseOrValue<string>;
    tokens: PromiseOrValue<string>[];
  };

  export type EmergencyMigrationStructOutput = [string, string[]] & {
    recipient: string;
    tokens: string[];
  };
}

export declare namespace IVotiumMultiMerkleStash {
  export type ClaimParamStruct = {
    token: PromiseOrValue<string>;
    index: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    merkleProof: PromiseOrValue<BytesLike>[];
  };

  export type ClaimParamStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    token: string;
    index: BigNumber;
    amount: BigNumber;
    merkleProof: string[];
  };
}

export interface PirexCvxInterface extends utils.Interface {
  functions: {
    "CVX()": FunctionFragment;
    "EPOCH_DURATION()": FunctionFragment;
    "FEE_DENOMINATOR()": FunctionFragment;
    "FEE_MAX()": FunctionFragment;
    "MAX_REDEMPTION_TIME()": FunctionFragment;
    "addDeveloper(address)": FunctionFragment;
    "claimMiscRewards()": FunctionFragment;
    "claimVotiumRewards((address,uint256,uint256,bytes32[])[])": FunctionFragment;
    "clearVoteDelegate()": FunctionFragment;
    "cvxDelegateRegistry()": FunctionFragment;
    "cvxLocker()": FunctionFragment;
    "delegationSpace()": FunctionFragment;
    "deposit(uint256,address,bool,address)": FunctionFragment;
    "developers(address)": FunctionFragment;
    "emergencyExecutor()": FunctionFragment;
    "emergencyMigration()": FunctionFragment;
    "exchangeFutures(uint256,uint256,address,uint8)": FunctionFragment;
    "executeEmergencyMigration()": FunctionFragment;
    "fees(uint8)": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "initializeEmergencyExecutor(address)": FunctionFragment;
    "initiateRedemptions(uint256[],uint8,uint256[],address)": FunctionFragment;
    "lock()": FunctionFragment;
    "outstandingRedemptions()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausedRelock()": FunctionFragment;
    "pendingLocks()": FunctionFragment;
    "pirexFees()": FunctionFragment;
    "pxCvx()": FunctionFragment;
    "redeem(uint256[],uint256[],address)": FunctionFragment;
    "redeemFuturesRewards(uint256,address)": FunctionFragment;
    "redeemLegacy(uint256[],uint256[],address)": FunctionFragment;
    "redeemSnapshotRewards(uint256,uint256[],address)": FunctionFragment;
    "redemptions(uint256)": FunctionFragment;
    "removeDeveloper(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rpxCvx()": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setConvexContract(uint8,address)": FunctionFragment;
    "setDelegationSpace(string,bool)": FunctionFragment;
    "setEmergencyMigration((address,address[]))": FunctionFragment;
    "setFee(uint8,uint32)": FunctionFragment;
    "setPauseState(bool)": FunctionFragment;
    "setUpxCvxDeprecated(bool)": FunctionFragment;
    "setVoteDelegate(address)": FunctionFragment;
    "spxCvx()": FunctionFragment;
    "stake(uint256,uint8,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unionPirex()": FunctionFragment;
    "unlock()": FunctionFragment;
    "unstake(uint256,uint256,address)": FunctionFragment;
    "upxCvx()": FunctionFragment;
    "upxCvxDeprecated()": FunctionFragment;
    "votiumMultiMerkleStash()": FunctionFragment;
    "vpxCvx()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CVX"
      | "EPOCH_DURATION"
      | "FEE_DENOMINATOR"
      | "FEE_MAX"
      | "MAX_REDEMPTION_TIME"
      | "addDeveloper"
      | "claimMiscRewards"
      | "claimVotiumRewards"
      | "clearVoteDelegate"
      | "cvxDelegateRegistry"
      | "cvxLocker"
      | "delegationSpace"
      | "deposit"
      | "developers"
      | "emergencyExecutor"
      | "emergencyMigration"
      | "exchangeFutures"
      | "executeEmergencyMigration"
      | "fees"
      | "getCurrentEpoch"
      | "initializeEmergencyExecutor"
      | "initiateRedemptions"
      | "lock"
      | "outstandingRedemptions"
      | "owner"
      | "paused"
      | "pausedRelock"
      | "pendingLocks"
      | "pirexFees"
      | "pxCvx"
      | "redeem"
      | "redeemFuturesRewards"
      | "redeemLegacy"
      | "redeemSnapshotRewards"
      | "redemptions"
      | "removeDeveloper"
      | "renounceOwnership"
      | "rpxCvx"
      | "setContract"
      | "setConvexContract"
      | "setDelegationSpace"
      | "setEmergencyMigration"
      | "setFee"
      | "setPauseState"
      | "setUpxCvxDeprecated"
      | "setVoteDelegate"
      | "spxCvx"
      | "stake"
      | "transferOwnership"
      | "unionPirex"
      | "unlock"
      | "unstake"
      | "upxCvx"
      | "upxCvxDeprecated"
      | "votiumMultiMerkleStash"
      | "vpxCvx"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CVX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REDEMPTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDeveloper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMiscRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimVotiumRewards",
    values: [IVotiumMultiMerkleStash.ClaimParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearVoteDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cvxDelegateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cvxLocker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegationSpace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "developers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFutures",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeEmergencyExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRedemptions",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outstandingRedemptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedRelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pirexFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "pxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFuturesRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLegacy",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSnapshotRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeveloper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rpxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConvexContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationSpace",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMigration",
    values: [PirexCvx.EmergencyMigrationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseState",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpxCvxDeprecated",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteDelegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "spxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unionPirex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "upxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upxCvxDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votiumMultiMerkleStash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vpxCvx", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CVX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REDEMPTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMiscRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVotiumRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearVoteDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cvxDelegateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "developers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFutures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeEmergencyExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outstandingRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedRelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pirexFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pxCvx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFuturesRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSnapshotRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rpxCvx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConvexContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPauseState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpxCvxDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spxCvx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unionPirex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upxCvx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upxCvxDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votiumMultiMerkleStash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vpxCvx", data: BytesLike): Result;

  events: {
    "AddDeveloper(address)": EventFragment;
    "ClaimMiscRewards(uint256,tuple[])": EventFragment;
    "ClaimVotiumReward(address,uint256,uint256)": EventFragment;
    "ClearVoteDelegate()": EventFragment;
    "Deposit(uint256,address,bool,address)": EventFragment;
    "ExchangeFutures(uint256,uint256,address,uint8)": EventFragment;
    "ExecuteEmergencyMigration(address,address[])": EventFragment;
    "InitializeEmergencyExecutor(address)": EventFragment;
    "InitiateRedemptions(uint256[],uint8,uint256[],address)": EventFragment;
    "MintFutures(uint256,uint8,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Redeem(uint256[],uint256[],address,bool)": EventFragment;
    "RedeemFuturesRewards(uint256,address,bytes32[])": EventFragment;
    "RedeemSnapshotRewards(uint256,uint256[],address,uint256,uint256)": EventFragment;
    "RemoveDeveloper(address)": EventFragment;
    "SetContract(uint8,address)": EventFragment;
    "SetConvexContract(uint8,address)": EventFragment;
    "SetDelegationSpace(string,bool)": EventFragment;
    "SetEmergencyMigration(tuple)": EventFragment;
    "SetFee(uint8,uint32)": EventFragment;
    "SetUpxCvxDeprecated(bool)": EventFragment;
    "SetVoteDelegate(address)": EventFragment;
    "Stake(uint256,uint8,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Unstake(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddDeveloper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimMiscRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimVotiumReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearVoteDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeFutures"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteEmergencyMigration"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitializeEmergencyExecutor"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateRedemptions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFutures"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemFuturesRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemSnapshotRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveDeveloper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConvexContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelegationSpace"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergencyMigration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUpxCvxDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVoteDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface AddDeveloperEventObject {
  developer: string;
}
export type AddDeveloperEvent = TypedEvent<[string], AddDeveloperEventObject>;

export type AddDeveloperEventFilter = TypedEventFilter<AddDeveloperEvent>;

export interface ClaimMiscRewardsEventObject {
  timestamp: BigNumber;
  rewards: PirexCvxConvex.ConvexRewardStructOutput[];
}
export type ClaimMiscRewardsEvent = TypedEvent<
  [BigNumber, PirexCvxConvex.ConvexRewardStructOutput[]],
  ClaimMiscRewardsEventObject
>;

export type ClaimMiscRewardsEventFilter =
  TypedEventFilter<ClaimMiscRewardsEvent>;

export interface ClaimVotiumRewardEventObject {
  token: string;
  index: BigNumber;
  amount: BigNumber;
}
export type ClaimVotiumRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimVotiumRewardEventObject
>;

export type ClaimVotiumRewardEventFilter =
  TypedEventFilter<ClaimVotiumRewardEvent>;

export interface ClearVoteDelegateEventObject {}
export type ClearVoteDelegateEvent = TypedEvent<
  [],
  ClearVoteDelegateEventObject
>;

export type ClearVoteDelegateEventFilter =
  TypedEventFilter<ClearVoteDelegateEvent>;

export interface DepositEventObject {
  assets: BigNumber;
  receiver: string;
  shouldCompound: boolean;
  developer: string;
}
export type DepositEvent = TypedEvent<
  [BigNumber, string, boolean, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ExchangeFuturesEventObject {
  epoch: BigNumber;
  amount: BigNumber;
  receiver: string;
  f: number;
}
export type ExchangeFuturesEvent = TypedEvent<
  [BigNumber, BigNumber, string, number],
  ExchangeFuturesEventObject
>;

export type ExchangeFuturesEventFilter = TypedEventFilter<ExchangeFuturesEvent>;

export interface ExecuteEmergencyMigrationEventObject {
  recipient: string;
  tokens: string[];
}
export type ExecuteEmergencyMigrationEvent = TypedEvent<
  [string, string[]],
  ExecuteEmergencyMigrationEventObject
>;

export type ExecuteEmergencyMigrationEventFilter =
  TypedEventFilter<ExecuteEmergencyMigrationEvent>;

export interface InitializeEmergencyExecutorEventObject {
  _emergencyExecutor: string;
}
export type InitializeEmergencyExecutorEvent = TypedEvent<
  [string],
  InitializeEmergencyExecutorEventObject
>;

export type InitializeEmergencyExecutorEventFilter =
  TypedEventFilter<InitializeEmergencyExecutorEvent>;

export interface InitiateRedemptionsEventObject {
  lockIndexes: BigNumber[];
  f: number;
  assets: BigNumber[];
  receiver: string;
}
export type InitiateRedemptionsEvent = TypedEvent<
  [BigNumber[], number, BigNumber[], string],
  InitiateRedemptionsEventObject
>;

export type InitiateRedemptionsEventFilter =
  TypedEventFilter<InitiateRedemptionsEvent>;

export interface MintFuturesEventObject {
  rounds: BigNumber;
  f: number;
  assets: BigNumber;
  receiver: string;
}
export type MintFuturesEvent = TypedEvent<
  [BigNumber, number, BigNumber, string],
  MintFuturesEventObject
>;

export type MintFuturesEventFilter = TypedEventFilter<MintFuturesEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RedeemEventObject {
  unlockTimes: BigNumber[];
  assets: BigNumber[];
  receiver: string;
  legacy: boolean;
}
export type RedeemEvent = TypedEvent<
  [BigNumber[], BigNumber[], string, boolean],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RedeemFuturesRewardsEventObject {
  epoch: BigNumber;
  receiver: string;
  rewards: string[];
}
export type RedeemFuturesRewardsEvent = TypedEvent<
  [BigNumber, string, string[]],
  RedeemFuturesRewardsEventObject
>;

export type RedeemFuturesRewardsEventFilter =
  TypedEventFilter<RedeemFuturesRewardsEvent>;

export interface RedeemSnapshotRewardsEventObject {
  epoch: BigNumber;
  rewardIndexes: BigNumber[];
  receiver: string;
  snapshotBalance: BigNumber;
  snapshotSupply: BigNumber;
}
export type RedeemSnapshotRewardsEvent = TypedEvent<
  [BigNumber, BigNumber[], string, BigNumber, BigNumber],
  RedeemSnapshotRewardsEventObject
>;

export type RedeemSnapshotRewardsEventFilter =
  TypedEventFilter<RedeemSnapshotRewardsEvent>;

export interface RemoveDeveloperEventObject {
  developer: string;
}
export type RemoveDeveloperEvent = TypedEvent<
  [string],
  RemoveDeveloperEventObject
>;

export type RemoveDeveloperEventFilter = TypedEventFilter<RemoveDeveloperEvent>;

export interface SetContractEventObject {
  c: number;
  contractAddress: string;
}
export type SetContractEvent = TypedEvent<
  [number, string],
  SetContractEventObject
>;

export type SetContractEventFilter = TypedEventFilter<SetContractEvent>;

export interface SetConvexContractEventObject {
  c: number;
  contractAddress: string;
}
export type SetConvexContractEvent = TypedEvent<
  [number, string],
  SetConvexContractEventObject
>;

export type SetConvexContractEventFilter =
  TypedEventFilter<SetConvexContractEvent>;

export interface SetDelegationSpaceEventObject {
  _delegationSpace: string;
  shouldClear: boolean;
}
export type SetDelegationSpaceEvent = TypedEvent<
  [string, boolean],
  SetDelegationSpaceEventObject
>;

export type SetDelegationSpaceEventFilter =
  TypedEventFilter<SetDelegationSpaceEvent>;

export interface SetEmergencyMigrationEventObject {
  _emergencyMigration: PirexCvx.EmergencyMigrationStructOutput;
}
export type SetEmergencyMigrationEvent = TypedEvent<
  [PirexCvx.EmergencyMigrationStructOutput],
  SetEmergencyMigrationEventObject
>;

export type SetEmergencyMigrationEventFilter =
  TypedEventFilter<SetEmergencyMigrationEvent>;

export interface SetFeeEventObject {
  f: number;
  fee: number;
}
export type SetFeeEvent = TypedEvent<[number, number], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetUpxCvxDeprecatedEventObject {
  state: boolean;
}
export type SetUpxCvxDeprecatedEvent = TypedEvent<
  [boolean],
  SetUpxCvxDeprecatedEventObject
>;

export type SetUpxCvxDeprecatedEventFilter =
  TypedEventFilter<SetUpxCvxDeprecatedEvent>;

export interface SetVoteDelegateEventObject {
  voteDelegate: string;
}
export type SetVoteDelegateEvent = TypedEvent<
  [string],
  SetVoteDelegateEventObject
>;

export type SetVoteDelegateEventFilter = TypedEventFilter<SetVoteDelegateEvent>;

export interface StakeEventObject {
  rounds: BigNumber;
  f: number;
  assets: BigNumber;
  receiver: string;
}
export type StakeEvent = TypedEvent<
  [BigNumber, number, BigNumber, string],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakeEventObject {
  id: BigNumber;
  assets: BigNumber;
  receiver: string;
}
export type UnstakeEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface PirexCvx extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PirexCvxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CVX(overrides?: CallOverrides): Promise<[string]>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<[number]>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[number]>;

    FEE_MAX(overrides?: CallOverrides): Promise<[number]>;

    MAX_REDEMPTION_TIME(overrides?: CallOverrides): Promise<[number]>;

    addDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMiscRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimVotiumRewards(
      votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearVoteDelegate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cvxDelegateRegistry(overrides?: CallOverrides): Promise<[string]>;

    cvxLocker(overrides?: CallOverrides): Promise<[string]>;

    delegationSpace(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      shouldCompound: PromiseOrValue<boolean>,
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    developers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyExecutor(overrides?: CallOverrides): Promise<[string]>;

    emergencyMigration(
      overrides?: CallOverrides
    ): Promise<[string] & { recipient: string }>;

    exchangeFutures(
      epoch: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      f: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeEmergencyMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    initializeEmergencyExecutor(
      _emergencyExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateRedemptions(
      lockIndexes: PromiseOrValue<BigNumberish>[],
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    outstandingRedemptions(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausedRelock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingLocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    pirexFees(overrides?: CallOverrides): Promise<[string]>;

    pxCvx(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemFuturesRewards(
      epoch: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemLegacy(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemSnapshotRewards(
      epoch: PromiseOrValue<BigNumberish>,
      rewardIndexes: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redemptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rpxCvx(overrides?: CallOverrides): Promise<[string]>;

    setContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConvexContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegationSpace(
      _delegationSpace: PromiseOrValue<string>,
      shouldClear: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyMigration(
      _emergencyMigration: PirexCvx.EmergencyMigrationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      f: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauseState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpxCvxDeprecated(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoteDelegate(
      voteDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spxCvx(overrides?: CallOverrides): Promise<[string]>;

    stake(
      rounds: PromiseOrValue<BigNumberish>,
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unionPirex(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      id: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upxCvx(overrides?: CallOverrides): Promise<[string]>;

    upxCvxDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    votiumMultiMerkleStash(overrides?: CallOverrides): Promise<[string]>;

    vpxCvx(overrides?: CallOverrides): Promise<[string]>;
  };

  CVX(overrides?: CallOverrides): Promise<string>;

  EPOCH_DURATION(overrides?: CallOverrides): Promise<number>;

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<number>;

  FEE_MAX(overrides?: CallOverrides): Promise<number>;

  MAX_REDEMPTION_TIME(overrides?: CallOverrides): Promise<number>;

  addDeveloper(
    developer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMiscRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimVotiumRewards(
    votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearVoteDelegate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cvxDelegateRegistry(overrides?: CallOverrides): Promise<string>;

  cvxLocker(overrides?: CallOverrides): Promise<string>;

  delegationSpace(overrides?: CallOverrides): Promise<string>;

  deposit(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    shouldCompound: PromiseOrValue<boolean>,
    developer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  developers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  emergencyExecutor(overrides?: CallOverrides): Promise<string>;

  emergencyMigration(overrides?: CallOverrides): Promise<string>;

  exchangeFutures(
    epoch: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    f: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeEmergencyMigration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  initializeEmergencyExecutor(
    _emergencyExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateRedemptions(
    lockIndexes: PromiseOrValue<BigNumberish>[],
    f: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  outstandingRedemptions(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausedRelock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingLocks(overrides?: CallOverrides): Promise<BigNumber>;

  pirexFees(overrides?: CallOverrides): Promise<string>;

  pxCvx(overrides?: CallOverrides): Promise<string>;

  redeem(
    unlockTimes: PromiseOrValue<BigNumberish>[],
    assets: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemFuturesRewards(
    epoch: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemLegacy(
    unlockTimes: PromiseOrValue<BigNumberish>[],
    assets: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemSnapshotRewards(
    epoch: PromiseOrValue<BigNumberish>,
    rewardIndexes: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redemptions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeDeveloper(
    developer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rpxCvx(overrides?: CallOverrides): Promise<string>;

  setContract(
    c: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConvexContract(
    c: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegationSpace(
    _delegationSpace: PromiseOrValue<string>,
    shouldClear: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyMigration(
    _emergencyMigration: PirexCvx.EmergencyMigrationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    f: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauseState(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpxCvxDeprecated(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoteDelegate(
    voteDelegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spxCvx(overrides?: CallOverrides): Promise<string>;

  stake(
    rounds: PromiseOrValue<BigNumberish>,
    f: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unionPirex(overrides?: CallOverrides): Promise<string>;

  unlock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    id: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upxCvx(overrides?: CallOverrides): Promise<string>;

  upxCvxDeprecated(overrides?: CallOverrides): Promise<boolean>;

  votiumMultiMerkleStash(overrides?: CallOverrides): Promise<string>;

  vpxCvx(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CVX(overrides?: CallOverrides): Promise<string>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<number>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<number>;

    FEE_MAX(overrides?: CallOverrides): Promise<number>;

    MAX_REDEMPTION_TIME(overrides?: CallOverrides): Promise<number>;

    addDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMiscRewards(overrides?: CallOverrides): Promise<void>;

    claimVotiumRewards(
      votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    clearVoteDelegate(overrides?: CallOverrides): Promise<void>;

    cvxDelegateRegistry(overrides?: CallOverrides): Promise<string>;

    cvxLocker(overrides?: CallOverrides): Promise<string>;

    delegationSpace(overrides?: CallOverrides): Promise<string>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      shouldCompound: PromiseOrValue<boolean>,
      developer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    developers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyExecutor(overrides?: CallOverrides): Promise<string>;

    emergencyMigration(overrides?: CallOverrides): Promise<string>;

    exchangeFutures(
      epoch: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      f: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeEmergencyMigration(overrides?: CallOverrides): Promise<void>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    initializeEmergencyExecutor(
      _emergencyExecutor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateRedemptions(
      lockIndexes: PromiseOrValue<BigNumberish>[],
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(overrides?: CallOverrides): Promise<void>;

    outstandingRedemptions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausedRelock(overrides?: CallOverrides): Promise<void>;

    pendingLocks(overrides?: CallOverrides): Promise<BigNumber>;

    pirexFees(overrides?: CallOverrides): Promise<string>;

    pxCvx(overrides?: CallOverrides): Promise<string>;

    redeem(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFuturesRewards(
      epoch: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLegacy(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemSnapshotRewards(
      epoch: PromiseOrValue<BigNumberish>,
      rewardIndexes: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rpxCvx(overrides?: CallOverrides): Promise<string>;

    setContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConvexContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationSpace(
      _delegationSpace: PromiseOrValue<string>,
      shouldClear: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyMigration(
      _emergencyMigration: PirexCvx.EmergencyMigrationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      f: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseState(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpxCvxDeprecated(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoteDelegate(
      voteDelegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spxCvx(overrides?: CallOverrides): Promise<string>;

    stake(
      rounds: PromiseOrValue<BigNumberish>,
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unionPirex(overrides?: CallOverrides): Promise<string>;

    unlock(overrides?: CallOverrides): Promise<void>;

    unstake(
      id: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upxCvx(overrides?: CallOverrides): Promise<string>;

    upxCvxDeprecated(overrides?: CallOverrides): Promise<boolean>;

    votiumMultiMerkleStash(overrides?: CallOverrides): Promise<string>;

    vpxCvx(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddDeveloper(address)"(developer?: null): AddDeveloperEventFilter;
    AddDeveloper(developer?: null): AddDeveloperEventFilter;

    "ClaimMiscRewards(uint256,tuple[])"(
      timestamp?: null,
      rewards?: null
    ): ClaimMiscRewardsEventFilter;
    ClaimMiscRewards(
      timestamp?: null,
      rewards?: null
    ): ClaimMiscRewardsEventFilter;

    "ClaimVotiumReward(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null
    ): ClaimVotiumRewardEventFilter;
    ClaimVotiumReward(
      token?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null
    ): ClaimVotiumRewardEventFilter;

    "ClearVoteDelegate()"(): ClearVoteDelegateEventFilter;
    ClearVoteDelegate(): ClearVoteDelegateEventFilter;

    "Deposit(uint256,address,bool,address)"(
      assets?: null,
      receiver?: PromiseOrValue<string> | null,
      shouldCompound?: PromiseOrValue<boolean> | null,
      developer?: PromiseOrValue<string> | null
    ): DepositEventFilter;
    Deposit(
      assets?: null,
      receiver?: PromiseOrValue<string> | null,
      shouldCompound?: PromiseOrValue<boolean> | null,
      developer?: PromiseOrValue<string> | null
    ): DepositEventFilter;

    "ExchangeFutures(uint256,uint256,address,uint8)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      receiver?: PromiseOrValue<string> | null,
      f?: null
    ): ExchangeFuturesEventFilter;
    ExchangeFutures(
      epoch?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      receiver?: PromiseOrValue<string> | null,
      f?: null
    ): ExchangeFuturesEventFilter;

    "ExecuteEmergencyMigration(address,address[])"(
      recipient?: null,
      tokens?: null
    ): ExecuteEmergencyMigrationEventFilter;
    ExecuteEmergencyMigration(
      recipient?: null,
      tokens?: null
    ): ExecuteEmergencyMigrationEventFilter;

    "InitializeEmergencyExecutor(address)"(
      _emergencyExecutor?: null
    ): InitializeEmergencyExecutorEventFilter;
    InitializeEmergencyExecutor(
      _emergencyExecutor?: null
    ): InitializeEmergencyExecutorEventFilter;

    "InitiateRedemptions(uint256[],uint8,uint256[],address)"(
      lockIndexes?: null,
      f?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): InitiateRedemptionsEventFilter;
    InitiateRedemptions(
      lockIndexes?: null,
      f?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): InitiateRedemptionsEventFilter;

    "MintFutures(uint256,uint8,uint256,address)"(
      rounds?: null,
      f?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): MintFuturesEventFilter;
    MintFutures(
      rounds?: null,
      f?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): MintFuturesEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Redeem(uint256[],uint256[],address,bool)"(
      unlockTimes?: null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null,
      legacy?: null
    ): RedeemEventFilter;
    Redeem(
      unlockTimes?: null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null,
      legacy?: null
    ): RedeemEventFilter;

    "RedeemFuturesRewards(uint256,address,bytes32[])"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<string> | null,
      rewards?: null
    ): RedeemFuturesRewardsEventFilter;
    RedeemFuturesRewards(
      epoch?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<string> | null,
      rewards?: null
    ): RedeemFuturesRewardsEventFilter;

    "RedeemSnapshotRewards(uint256,uint256[],address,uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      rewardIndexes?: null,
      receiver?: PromiseOrValue<string> | null,
      snapshotBalance?: null,
      snapshotSupply?: null
    ): RedeemSnapshotRewardsEventFilter;
    RedeemSnapshotRewards(
      epoch?: PromiseOrValue<BigNumberish> | null,
      rewardIndexes?: null,
      receiver?: PromiseOrValue<string> | null,
      snapshotBalance?: null,
      snapshotSupply?: null
    ): RedeemSnapshotRewardsEventFilter;

    "RemoveDeveloper(address)"(developer?: null): RemoveDeveloperEventFilter;
    RemoveDeveloper(developer?: null): RemoveDeveloperEventFilter;

    "SetContract(uint8,address)"(
      c?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: null
    ): SetContractEventFilter;
    SetContract(
      c?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: null
    ): SetContractEventFilter;

    "SetConvexContract(uint8,address)"(
      c?: null,
      contractAddress?: null
    ): SetConvexContractEventFilter;
    SetConvexContract(
      c?: null,
      contractAddress?: null
    ): SetConvexContractEventFilter;

    "SetDelegationSpace(string,bool)"(
      _delegationSpace?: null,
      shouldClear?: null
    ): SetDelegationSpaceEventFilter;
    SetDelegationSpace(
      _delegationSpace?: null,
      shouldClear?: null
    ): SetDelegationSpaceEventFilter;

    "SetEmergencyMigration(tuple)"(
      _emergencyMigration?: null
    ): SetEmergencyMigrationEventFilter;
    SetEmergencyMigration(
      _emergencyMigration?: null
    ): SetEmergencyMigrationEventFilter;

    "SetFee(uint8,uint32)"(
      f?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): SetFeeEventFilter;
    SetFee(
      f?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): SetFeeEventFilter;

    "SetUpxCvxDeprecated(bool)"(state?: null): SetUpxCvxDeprecatedEventFilter;
    SetUpxCvxDeprecated(state?: null): SetUpxCvxDeprecatedEventFilter;

    "SetVoteDelegate(address)"(voteDelegate?: null): SetVoteDelegateEventFilter;
    SetVoteDelegate(voteDelegate?: null): SetVoteDelegateEventFilter;

    "Stake(uint256,uint8,uint256,address)"(
      rounds?: null,
      f?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): StakeEventFilter;
    Stake(
      rounds?: null,
      f?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): StakeEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Unstake(uint256,uint256,address)"(
      id?: null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): UnstakeEventFilter;
    Unstake(
      id?: null,
      assets?: null,
      receiver?: PromiseOrValue<string> | null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    CVX(overrides?: CallOverrides): Promise<BigNumber>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REDEMPTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    addDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMiscRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimVotiumRewards(
      votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearVoteDelegate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cvxDelegateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    cvxLocker(overrides?: CallOverrides): Promise<BigNumber>;

    delegationSpace(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      shouldCompound: PromiseOrValue<boolean>,
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    developers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyExecutor(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyMigration(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFutures(
      epoch: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      f: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeEmergencyMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    initializeEmergencyExecutor(
      _emergencyExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateRedemptions(
      lockIndexes: PromiseOrValue<BigNumberish>[],
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    outstandingRedemptions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausedRelock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingLocks(overrides?: CallOverrides): Promise<BigNumber>;

    pirexFees(overrides?: CallOverrides): Promise<BigNumber>;

    pxCvx(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemFuturesRewards(
      epoch: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemLegacy(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemSnapshotRewards(
      epoch: PromiseOrValue<BigNumberish>,
      rewardIndexes: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redemptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rpxCvx(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConvexContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegationSpace(
      _delegationSpace: PromiseOrValue<string>,
      shouldClear: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyMigration(
      _emergencyMigration: PirexCvx.EmergencyMigrationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      f: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauseState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpxCvxDeprecated(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoteDelegate(
      voteDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spxCvx(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      rounds: PromiseOrValue<BigNumberish>,
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unionPirex(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      id: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upxCvx(overrides?: CallOverrides): Promise<BigNumber>;

    upxCvxDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    votiumMultiMerkleStash(overrides?: CallOverrides): Promise<BigNumber>;

    vpxCvx(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CVX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REDEMPTION_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMiscRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimVotiumRewards(
      votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearVoteDelegate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cvxDelegateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cvxLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegationSpace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      shouldCompound: PromiseOrValue<boolean>,
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    developers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyExecutor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyMigration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeFutures(
      epoch: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      f: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeEmergencyMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeEmergencyExecutor(
      _emergencyExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateRedemptions(
      lockIndexes: PromiseOrValue<BigNumberish>[],
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    outstandingRedemptions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedRelock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingLocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pirexFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pxCvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemFuturesRewards(
      epoch: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemLegacy(
      unlockTimes: PromiseOrValue<BigNumberish>[],
      assets: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemSnapshotRewards(
      epoch: PromiseOrValue<BigNumberish>,
      rewardIndexes: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redemptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDeveloper(
      developer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rpxCvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConvexContract(
      c: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegationSpace(
      _delegationSpace: PromiseOrValue<string>,
      shouldClear: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyMigration(
      _emergencyMigration: PirexCvx.EmergencyMigrationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      f: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauseState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpxCvxDeprecated(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoteDelegate(
      voteDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spxCvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      rounds: PromiseOrValue<BigNumberish>,
      f: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unionPirex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      id: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upxCvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upxCvxDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votiumMultiMerkleStash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vpxCvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
