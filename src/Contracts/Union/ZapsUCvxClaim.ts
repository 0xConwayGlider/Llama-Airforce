/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ZapsUCvxClaimInterface extends utils.Interface {
  functions: {
    "claimFromDistributorAsCrv(uint256,address,uint256,bytes32[],uint256,address)": FunctionFragment;
    "claimFromDistributorAsCvx(uint256,address,uint256,bytes32[],uint256,address)": FunctionFragment;
    "claimFromDistributorAsCvxCrv(uint256,address,uint256,bytes32[],uint256,address)": FunctionFragment;
    "claimFromDistributorAsEth(uint256,address,uint256,bytes32[],uint256,address)": FunctionFragment;
    "claimFromDistributorAsUsdt(uint256,address,uint256,bytes32[],uint256,address)": FunctionFragment;
    "claimFromDistributorViaUniV2EthPair(uint256,address,uint256,bytes32[],uint256,address,address,address)": FunctionFragment;
    "distributor()": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "vault()": FunctionFragment;
    "zaps()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFromDistributorAsCrv"
      | "claimFromDistributorAsCvx"
      | "claimFromDistributorAsCvxCrv"
      | "claimFromDistributorAsEth"
      | "claimFromDistributorAsUsdt"
      | "claimFromDistributorViaUniV2EthPair"
      | "distributor"
      | "setApprovals"
      | "vault"
      | "zaps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFromDistributorAsCrv",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDistributorAsCvx",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDistributorAsCvxCrv",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDistributorAsEth",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDistributorAsUsdt",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDistributorViaUniV2EthPair",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "zaps", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimFromDistributorAsCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDistributorAsCvx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDistributorAsCvxCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDistributorAsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDistributorAsUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDistributorViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zaps", data: BytesLike): Result;

  events: {};
}

export interface ZapsUCvxClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZapsUCvxClaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFromDistributorAsCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimFromDistributorAsCvx(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimFromDistributorAsCvxCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimFromDistributorAsEth(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimFromDistributorAsUsdt(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimFromDistributorViaUniV2EthPair(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      router: string,
      outputToken: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    setApprovals(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    zaps(overrides?: CallOverrides): Promise<[string]>;
  };

  claimFromDistributorAsCrv(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    minAmountOut: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimFromDistributorAsCvx(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    minAmountOut: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimFromDistributorAsCvxCrv(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    minAmountOut: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimFromDistributorAsEth(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    minAmountOut: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimFromDistributorAsUsdt(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    minAmountOut: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimFromDistributorViaUniV2EthPair(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    minAmountOut: BigNumberish,
    router: string,
    outputToken: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  setApprovals(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  zaps(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimFromDistributorAsCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromDistributorAsCvx(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromDistributorAsCvxCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromDistributorAsEth(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromDistributorAsUsdt(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFromDistributorViaUniV2EthPair(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      router: string,
      outputToken: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    zaps(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    claimFromDistributorAsCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimFromDistributorAsCvx(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimFromDistributorAsCvxCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimFromDistributorAsEth(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimFromDistributorAsUsdt(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimFromDistributorViaUniV2EthPair(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      router: string,
      outputToken: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    zaps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFromDistributorAsCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimFromDistributorAsCvx(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimFromDistributorAsCvxCrv(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimFromDistributorAsEth(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimFromDistributorAsUsdt(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimFromDistributorViaUniV2EthPair(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      minAmountOut: BigNumberish,
      router: string,
      outputToken: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zaps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
