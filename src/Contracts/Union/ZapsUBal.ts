/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ZapsUBalInterface extends utils.Interface {
  functions: {
    "AURABAL_PT_DEPOSIT()": FunctionFragment;
    "AURABAL_STAKING()": FunctionFragment;
    "AURABAL_TOKEN()": FunctionFragment;
    "AURA_TOKEN()": FunctionFragment;
    "BAL_ETH_POOL_TOKEN()": FunctionFragment;
    "BAL_TOKEN()": FunctionFragment;
    "BAL_VAULT()": FunctionFragment;
    "BBUSD_TOKEN()": FunctionFragment;
    "WETH_TOKEN()": FunctionFragment;
    "auraBalStaking()": FunctionFragment;
    "balVault()": FunctionFragment;
    "bptDepositor()": FunctionFragment;
    "claimFromVaultAsUnderlying(uint256,uint256,uint256,address,bool)": FunctionFragment;
    "claimFromVaultViaUniV2EthPair(uint256,uint256,address,address,address)": FunctionFragment;
    "depositFromEth(uint256,address,bool)": FunctionFragment;
    "depositFromUnderlyingAssets(uint256[2],uint256,address,bool)": FunctionFragment;
    "depositViaUniV2EthPair(uint256,uint256,address,address,address,bool)": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AURABAL_PT_DEPOSIT"
      | "AURABAL_STAKING"
      | "AURABAL_TOKEN"
      | "AURA_TOKEN"
      | "BAL_ETH_POOL_TOKEN"
      | "BAL_TOKEN"
      | "BAL_VAULT"
      | "BBUSD_TOKEN"
      | "WETH_TOKEN"
      | "auraBalStaking"
      | "balVault"
      | "bptDepositor"
      | "claimFromVaultAsUnderlying"
      | "claimFromVaultViaUniV2EthPair"
      | "depositFromEth"
      | "depositFromUnderlyingAssets"
      | "depositViaUniV2EthPair"
      | "setApprovals"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AURABAL_PT_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AURABAL_STAKING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AURABAL_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AURA_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BAL_ETH_POOL_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BAL_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "BAL_VAULT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BBUSD_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auraBalStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bptDepositor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsUnderlying",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromEth",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromUnderlyingAssets",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositViaUniV2EthPair",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AURABAL_PT_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AURABAL_STAKING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AURABAL_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "AURA_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BAL_ETH_POOL_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BAL_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BAL_VAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BBUSD_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auraBalStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bptDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromUnderlyingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export interface ZapsUBal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZapsUBalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AURABAL_PT_DEPOSIT(overrides?: CallOverrides): Promise<[string]>;

    AURABAL_STAKING(overrides?: CallOverrides): Promise<[string]>;

    AURABAL_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    AURA_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    BAL_ETH_POOL_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    BAL_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    BAL_VAULT(overrides?: CallOverrides): Promise<[string]>;

    BBUSD_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    auraBalStaking(overrides?: CallOverrides): Promise<[string]>;

    balVault(overrides?: CallOverrides): Promise<[string]>;

    bptDepositor(overrides?: CallOverrides): Promise<[string]>;

    claimFromVaultAsUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      _assetIndex: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _useWrappedEth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFromVaultViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFromEth(
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFromUnderlyingAssets(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  AURABAL_PT_DEPOSIT(overrides?: CallOverrides): Promise<string>;

  AURABAL_STAKING(overrides?: CallOverrides): Promise<string>;

  AURABAL_TOKEN(overrides?: CallOverrides): Promise<string>;

  AURA_TOKEN(overrides?: CallOverrides): Promise<string>;

  BAL_ETH_POOL_TOKEN(overrides?: CallOverrides): Promise<string>;

  BAL_TOKEN(overrides?: CallOverrides): Promise<string>;

  BAL_VAULT(overrides?: CallOverrides): Promise<string>;

  BBUSD_TOKEN(overrides?: CallOverrides): Promise<string>;

  WETH_TOKEN(overrides?: CallOverrides): Promise<string>;

  auraBalStaking(overrides?: CallOverrides): Promise<string>;

  balVault(overrides?: CallOverrides): Promise<string>;

  bptDepositor(overrides?: CallOverrides): Promise<string>;

  claimFromVaultAsUnderlying(
    _amount: PromiseOrValue<BigNumberish>,
    _assetIndex: PromiseOrValue<BigNumberish>,
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _useWrappedEth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFromVaultViaUniV2EthPair(
    _amount: PromiseOrValue<BigNumberish>,
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _outputToken: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFromEth(
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _lock: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFromUnderlyingAssets(
    _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _lock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositViaUniV2EthPair(
    _amount: PromiseOrValue<BigNumberish>,
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _inputToken: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _lock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovals(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AURABAL_PT_DEPOSIT(overrides?: CallOverrides): Promise<string>;

    AURABAL_STAKING(overrides?: CallOverrides): Promise<string>;

    AURABAL_TOKEN(overrides?: CallOverrides): Promise<string>;

    AURA_TOKEN(overrides?: CallOverrides): Promise<string>;

    BAL_ETH_POOL_TOKEN(overrides?: CallOverrides): Promise<string>;

    BAL_TOKEN(overrides?: CallOverrides): Promise<string>;

    BAL_VAULT(overrides?: CallOverrides): Promise<string>;

    BBUSD_TOKEN(overrides?: CallOverrides): Promise<string>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<string>;

    auraBalStaking(overrides?: CallOverrides): Promise<string>;

    balVault(overrides?: CallOverrides): Promise<string>;

    bptDepositor(overrides?: CallOverrides): Promise<string>;

    claimFromVaultAsUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      _assetIndex: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _useWrappedEth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromVaultViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFromEth(
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFromUnderlyingAssets(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    AURABAL_PT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    AURABAL_STAKING(overrides?: CallOverrides): Promise<BigNumber>;

    AURABAL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    AURA_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    BAL_ETH_POOL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    BAL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    BAL_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    BBUSD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    auraBalStaking(overrides?: CallOverrides): Promise<BigNumber>;

    balVault(overrides?: CallOverrides): Promise<BigNumber>;

    bptDepositor(overrides?: CallOverrides): Promise<BigNumber>;

    claimFromVaultAsUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      _assetIndex: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _useWrappedEth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFromVaultViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFromEth(
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFromUnderlyingAssets(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AURABAL_PT_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AURABAL_STAKING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AURABAL_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AURA_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BAL_ETH_POOL_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BAL_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BAL_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BBUSD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auraBalStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bptDepositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFromVaultAsUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      _assetIndex: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _useWrappedEth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFromVaultViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFromEth(
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFromUnderlyingAssets(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositViaUniV2EthPair(
      _amount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _lock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
