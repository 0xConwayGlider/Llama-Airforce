/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface VotiumRegistryInterface extends utils.Interface {
  functions: {
    "batchAddressCheck(address[])": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "eDuration()": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "forceRegistry(address,address)": FunctionFragment;
    "forceToExpire(address)": FunctionFragment;
    "forwardHistory(uint256)": FunctionFragment;
    "forwardLength()": FunctionFragment;
    "forwardPage(uint256,uint256)": FunctionFragment;
    "inForwardHistory(address)": FunctionFragment;
    "inOptOutHistory(address)": FunctionFragment;
    "nextEpoch()": FunctionFragment;
    "optOutHistory(uint256)": FunctionFragment;
    "optOutLength()": FunctionFragment;
    "optOutPage(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setToExpire()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchAddressCheck"
      | "currentEpoch"
      | "eDuration"
      | "execute"
      | "forceRegistry"
      | "forceToExpire"
      | "forwardHistory"
      | "forwardLength"
      | "forwardPage"
      | "inForwardHistory"
      | "inOptOutHistory"
      | "nextEpoch"
      | "optOutHistory"
      | "optOutLength"
      | "optOutPage"
      | "owner"
      | "registry"
      | "setRegistry"
      | "setToExpire"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchAddressCheck",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eDuration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRegistry",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceToExpire",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwardPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inForwardHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inOptOutHistory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nextEpoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optOutHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optOutLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optOutPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values: [string]): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setToExpire",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchAddressCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceToExpire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inForwardHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inOptOutHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optOutHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optOutPage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToExpire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "expReg(address,uint256)": EventFragment;
    "setReg(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "expReg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setReg"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface expRegEventObject {
  _from: string;
  _end: BigNumber;
}
export type expRegEvent = TypedEvent<[string, BigNumber], expRegEventObject>;

export type expRegEventFilter = TypedEventFilter<expRegEvent>;

export interface setRegEventObject {
  _from: string;
  _to: string;
  _start: BigNumber;
}
export type setRegEvent = TypedEvent<
  [string, string, BigNumber],
  setRegEventObject
>;

export type setRegEventFilter = TypedEventFilter<setRegEvent>;

export interface VotiumRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotiumRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchAddressCheck(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    eDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceRegistry(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceToExpire(
      _from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forwardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    forwardLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    forwardPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    inForwardHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inOptOutHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    optOutHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    optOutLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    optOutPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        start: BigNumber;
        to: string;
        expiration: BigNumber;
      }
    >;

    setRegistry(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setToExpire(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  batchAddressCheck(
    accounts: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  eDuration(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceRegistry(
    _from: string,
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceToExpire(
    _from: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forwardHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  forwardLength(overrides?: CallOverrides): Promise<BigNumber>;

  forwardPage(
    size: BigNumberish,
    page: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  inForwardHistory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  inOptOutHistory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  optOutHistory(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  optOutLength(overrides?: CallOverrides): Promise<BigNumber>;

  optOutPage(
    size: BigNumberish,
    page: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      start: BigNumber;
      to: string;
      expiration: BigNumber;
    }
  >;

  setRegistry(
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setToExpire(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchAddressCheck(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    eDuration(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    forceRegistry(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forceToExpire(_from: string, overrides?: CallOverrides): Promise<void>;

    forwardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    forwardLength(overrides?: CallOverrides): Promise<BigNumber>;

    forwardPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    inForwardHistory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    inOptOutHistory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    optOutHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    optOutLength(overrides?: CallOverrides): Promise<BigNumber>;

    optOutPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        start: BigNumber;
        to: string;
        expiration: BigNumber;
      }
    >;

    setRegistry(_to: string, overrides?: CallOverrides): Promise<void>;

    setToExpire(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "expReg(address,uint256)"(
      _from?: string | null,
      _end?: BigNumberish | null
    ): expRegEventFilter;
    expReg(
      _from?: string | null,
      _end?: BigNumberish | null
    ): expRegEventFilter;

    "setReg(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _start?: BigNumberish | null
    ): setRegEventFilter;
    setReg(
      _from?: string | null,
      _to?: string | null,
      _start?: BigNumberish | null
    ): setRegEventFilter;
  };

  estimateGas: {
    batchAddressCheck(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    eDuration(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceRegistry(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceToExpire(
      _from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forwardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwardLength(overrides?: CallOverrides): Promise<BigNumber>;

    forwardPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inForwardHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inOptOutHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    optOutHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optOutLength(overrides?: CallOverrides): Promise<BigNumber>;

    optOutPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRegistry(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setToExpire(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchAddressCheck(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceRegistry(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceToExpire(
      _from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forwardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwardLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwardPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inForwardHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inOptOutHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optOutHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optOutLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optOutPage(
      size: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setToExpire(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
