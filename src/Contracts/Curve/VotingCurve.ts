/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface VotingCurveInterface extends utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "minTime()": FunctionFragment;
    "votePct(uint256,uint256,uint256,bool)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "canCreateNewVote(address)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "MODIFY_QUORUM_ROLE()": FunctionFragment;
    "getVoterState(uint256,address)": FunctionFragment;
    "getVote(uint256)": FunctionFragment;
    "changeMinAcceptQuorumPct(uint64)": FunctionFragment;
    "MODIFY_SUPPORT_ROLE()": FunctionFragment;
    "lastCreateVoteTimes(address)": FunctionFragment;
    "changeSupportRequiredPct(uint64)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "ENABLE_VOTE_CREATION()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "minBalanceUpperLimit()": FunctionFragment;
    "setMinTime(uint256)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "initialize(address,uint64,uint64,uint64,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "SET_MIN_BALANCE_ROLE()": FunctionFragment;
    "minTimeLowerLimit()": FunctionFragment;
    "voteTime()": FunctionFragment;
    "CREATE_VOTES_ROLE()": FunctionFragment;
    "canForward(address,bytes)": FunctionFragment;
    "SET_MIN_TIME_ROLE()": FunctionFragment;
    "minBalance()": FunctionFragment;
    "setMinBalance(uint256)": FunctionFragment;
    "canExecute(uint256)": FunctionFragment;
    "canVote(uint256,address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "newVote(bytes,string)": FunctionFragment;
    "newVote(bytes,string,bool,bool)": FunctionFragment;
    "forward(bytes)": FunctionFragment;
    "disableVoteCreationOnce()": FunctionFragment;
    "minAcceptQuorumPct()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "votesLength()": FunctionFragment;
    "vote(uint256,bool,bool)": FunctionFragment;
    "enableVoteCreationOnce()": FunctionFragment;
    "minTimeUpperLimit()": FunctionFragment;
    "minBalanceLowerLimit()": FunctionFragment;
    "enableVoteCreation()": FunctionFragment;
    "executeVote(uint256)": FunctionFragment;
    "supportRequiredPct()": FunctionFragment;
    "token()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "isForwarder()": FunctionFragment;
    "DISABLE_VOTE_CREATION()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasInitialized"
      | "minTime"
      | "votePct"
      | "getEVMScriptExecutor"
      | "canCreateNewVote"
      | "getRecoveryVault"
      | "MODIFY_QUORUM_ROLE"
      | "getVoterState"
      | "getVote"
      | "changeMinAcceptQuorumPct"
      | "MODIFY_SUPPORT_ROLE"
      | "lastCreateVoteTimes"
      | "changeSupportRequiredPct"
      | "allowRecoverability"
      | "appId"
      | "ENABLE_VOTE_CREATION"
      | "getInitializationBlock"
      | "minBalanceUpperLimit"
      | "setMinTime"
      | "transferToVault"
      | "canPerform"
      | "getEVMScriptRegistry"
      | "initialize"
      | "SET_MIN_BALANCE_ROLE"
      | "minTimeLowerLimit"
      | "voteTime"
      | "CREATE_VOTES_ROLE"
      | "canForward"
      | "SET_MIN_TIME_ROLE"
      | "minBalance"
      | "setMinBalance"
      | "canExecute"
      | "canVote"
      | "kernel"
      | "newVote(bytes,string)"
      | "newVote(bytes,string,bool,bool)"
      | "forward"
      | "disableVoteCreationOnce"
      | "minAcceptQuorumPct"
      | "isPetrified"
      | "votesLength"
      | "vote"
      | "enableVoteCreationOnce"
      | "minTimeUpperLimit"
      | "minBalanceLowerLimit"
      | "enableVoteCreation"
      | "executeVote"
      | "supportRequiredPct"
      | "token"
      | "PCT_BASE"
      | "isForwarder"
      | "DISABLE_VOTE_CREATION"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votePct",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canCreateNewVote",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_QUORUM_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinAcceptQuorumPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_SUPPORT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCreateVoteTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSupportRequiredPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ENABLE_VOTE_CREATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBalanceUpperLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SET_MIN_BALANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeLowerLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voteTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CREATE_VOTES_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canForward",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SET_MIN_TIME_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newVote(bytes,string)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newVote(bytes,string,bool,bool)",
    values: [BytesLike, string, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "forward", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "disableVoteCreationOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAcceptQuorumPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "enableVoteCreationOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeUpperLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBalanceLowerLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableVoteCreation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportRequiredPct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISABLE_VOTE_CREATION",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votePct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCreateNewVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_QUORUM_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinAcceptQuorumPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_SUPPORT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCreateVoteTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSupportRequiredPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ENABLE_VOTE_CREATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBalanceUpperLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SET_MIN_BALANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeLowerLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_VOTES_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canForward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SET_MIN_TIME_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newVote(bytes,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newVote(bytes,string,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableVoteCreationOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAcceptQuorumPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableVoteCreationOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeUpperLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBalanceLowerLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableVoteCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportRequiredPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISABLE_VOTE_CREATION",
    data: BytesLike
  ): Result;

  events: {
    "StartVote(uint256,address,string,uint256,uint256,uint256,uint256)": EventFragment;
    "CastVote(uint256,address,bool,uint256)": EventFragment;
    "ExecuteVote(uint256)": EventFragment;
    "ChangeSupportRequired(uint64)": EventFragment;
    "ChangeMinQuorum(uint64)": EventFragment;
    "MinimumBalanceSet(uint256)": EventFragment;
    "MinimumTimeSet(uint256)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StartVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeSupportRequired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumBalanceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export interface StartVoteEventObject {
  voteId: BigNumber;
  creator: string;
  metadata: string;
  minBalance: BigNumber;
  minTime: BigNumber;
  totalSupply: BigNumber;
  creatorVotingPower: BigNumber;
}
export type StartVoteEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  StartVoteEventObject
>;

export type StartVoteEventFilter = TypedEventFilter<StartVoteEvent>;

export interface CastVoteEventObject {
  voteId: BigNumber;
  voter: string;
  supports: boolean;
  stake: BigNumber;
}
export type CastVoteEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  CastVoteEventObject
>;

export type CastVoteEventFilter = TypedEventFilter<CastVoteEvent>;

export interface ExecuteVoteEventObject {
  voteId: BigNumber;
}
export type ExecuteVoteEvent = TypedEvent<[BigNumber], ExecuteVoteEventObject>;

export type ExecuteVoteEventFilter = TypedEventFilter<ExecuteVoteEvent>;

export interface ChangeSupportRequiredEventObject {
  supportRequiredPct: BigNumber;
}
export type ChangeSupportRequiredEvent = TypedEvent<
  [BigNumber],
  ChangeSupportRequiredEventObject
>;

export type ChangeSupportRequiredEventFilter =
  TypedEventFilter<ChangeSupportRequiredEvent>;

export interface ChangeMinQuorumEventObject {
  minAcceptQuorumPct: BigNumber;
}
export type ChangeMinQuorumEvent = TypedEvent<
  [BigNumber],
  ChangeMinQuorumEventObject
>;

export type ChangeMinQuorumEventFilter = TypedEventFilter<ChangeMinQuorumEvent>;

export interface MinimumBalanceSetEventObject {
  minBalance: BigNumber;
}
export type MinimumBalanceSetEvent = TypedEvent<
  [BigNumber],
  MinimumBalanceSetEventObject
>;

export type MinimumBalanceSetEventFilter =
  TypedEventFilter<MinimumBalanceSetEvent>;

export interface MinimumTimeSetEventObject {
  minTime: BigNumber;
}
export type MinimumTimeSetEvent = TypedEvent<
  [BigNumber],
  MinimumTimeSetEventObject
>;

export type MinimumTimeSetEventFilter = TypedEventFilter<MinimumTimeSetEvent>;

export interface ScriptResultEventObject {
  executor: string;
  script: string;
  input: string;
  returnData: string;
}
export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  ScriptResultEventObject
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface VotingCurve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingCurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    minTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    votePct(
      _voteId: BigNumberish,
      _yeaPct: BigNumberish,
      _nayPct: BigNumberish,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    canCreateNewVote(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    lastCreateVoteTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    ENABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBalanceUpperLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinTime(
      _minTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      _minBalance: BigNumberish,
      _minTime: BigNumberish,
      _minBalanceLowerLimit: BigNumberish,
      _minBalanceUpperLimit: BigNumberish,
      _minTimeLowerLimit: BigNumberish,
      _minTimeUpperLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    SET_MIN_BALANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    minTimeLowerLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<[string]>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    SET_MIN_TIME_ROLE(overrides?: CallOverrides): Promise<[string]>;

    minBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinBalance(
      _minBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    disableVoteCreationOnce(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    votesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _voteData: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableVoteCreationOnce(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    minTimeUpperLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBalanceLowerLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    enableVoteCreation(overrides?: CallOverrides): Promise<[boolean]>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportRequiredPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    isForwarder(overrides?: CallOverrides): Promise<[boolean]>;

    DISABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<[string]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  minTime(overrides?: CallOverrides): Promise<BigNumber>;

  votePct(
    _voteId: BigNumberish,
    _yeaPct: BigNumberish,
    _nayPct: BigNumberish,
    _executesIfDecided: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  canCreateNewVote(
    _sender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<string>;

  getVoterState(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getVote(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      executed: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      supportRequired: BigNumber;
      minAcceptQuorum: BigNumber;
      yea: BigNumber;
      nay: BigNumber;
      votingPower: BigNumber;
      script: string;
    }
  >;

  changeMinAcceptQuorumPct(
    _minAcceptQuorumPct: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<string>;

  lastCreateVoteTimes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeSupportRequiredPct(
    _supportRequiredPct: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  ENABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  minBalanceUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

  setMinTime(
    _minTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  initialize(
    _token: string,
    _supportRequiredPct: BigNumberish,
    _minAcceptQuorumPct: BigNumberish,
    _voteTime: BigNumberish,
    _minBalance: BigNumberish,
    _minTime: BigNumberish,
    _minBalanceLowerLimit: BigNumberish,
    _minBalanceUpperLimit: BigNumberish,
    _minTimeLowerLimit: BigNumberish,
    _minTimeUpperLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  SET_MIN_BALANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  minTimeLowerLimit(overrides?: CallOverrides): Promise<BigNumber>;

  voteTime(overrides?: CallOverrides): Promise<BigNumber>;

  CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<string>;

  canForward(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  SET_MIN_TIME_ROLE(overrides?: CallOverrides): Promise<string>;

  minBalance(overrides?: CallOverrides): Promise<BigNumber>;

  setMinBalance(
    _minBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  canExecute(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canVote(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  "newVote(bytes,string)"(
    _executionScript: BytesLike,
    _metadata: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "newVote(bytes,string,bool,bool)"(
    _executionScript: BytesLike,
    _metadata: string,
    _castVote: boolean,
    _executesIfDecided: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forward(
    _evmScript: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  disableVoteCreationOnce(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  votesLength(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _voteData: BigNumberish,
    _supports: boolean,
    _executesIfDecided: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableVoteCreationOnce(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  minTimeUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

  minBalanceLowerLimit(overrides?: CallOverrides): Promise<BigNumber>;

  enableVoteCreation(overrides?: CallOverrides): Promise<boolean>;

  executeVote(
    _voteId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportRequiredPct(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  isForwarder(overrides?: CallOverrides): Promise<boolean>;

  DISABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    minTime(overrides?: CallOverrides): Promise<BigNumber>;

    votePct(
      _voteId: BigNumberish,
      _yeaPct: BigNumberish,
      _nayPct: BigNumberish,
      _executesIfDecided: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    canCreateNewVote(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<string>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<string>;

    lastCreateVoteTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    ENABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    minBalanceUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setMinTime(
      _minTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      _minBalance: BigNumberish,
      _minTime: BigNumberish,
      _minBalanceLowerLimit: BigNumberish,
      _minBalanceUpperLimit: BigNumberish,
      _minTimeLowerLimit: BigNumberish,
      _minTimeUpperLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SET_MIN_BALANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    minTimeLowerLimit(overrides?: CallOverrides): Promise<BigNumber>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<string>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    SET_MIN_TIME_ROLE(overrides?: CallOverrides): Promise<string>;

    minBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setMinBalance(
      _minBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forward(_evmScript: BytesLike, overrides?: CallOverrides): Promise<void>;

    disableVoteCreationOnce(overrides?: CallOverrides): Promise<void>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    votesLength(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _voteData: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    enableVoteCreationOnce(overrides?: CallOverrides): Promise<void>;

    minTimeUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minBalanceLowerLimit(overrides?: CallOverrides): Promise<BigNumber>;

    enableVoteCreation(overrides?: CallOverrides): Promise<boolean>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportRequiredPct(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<boolean>;

    DISABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "StartVote(uint256,address,string,uint256,uint256,uint256,uint256)"(
      voteId?: BigNumberish | null,
      creator?: string | null,
      metadata?: null,
      minBalance?: null,
      minTime?: null,
      totalSupply?: null,
      creatorVotingPower?: null
    ): StartVoteEventFilter;
    StartVote(
      voteId?: BigNumberish | null,
      creator?: string | null,
      metadata?: null,
      minBalance?: null,
      minTime?: null,
      totalSupply?: null,
      creatorVotingPower?: null
    ): StartVoteEventFilter;

    "CastVote(uint256,address,bool,uint256)"(
      voteId?: BigNumberish | null,
      voter?: string | null,
      supports?: null,
      stake?: null
    ): CastVoteEventFilter;
    CastVote(
      voteId?: BigNumberish | null,
      voter?: string | null,
      supports?: null,
      stake?: null
    ): CastVoteEventFilter;

    "ExecuteVote(uint256)"(
      voteId?: BigNumberish | null
    ): ExecuteVoteEventFilter;
    ExecuteVote(voteId?: BigNumberish | null): ExecuteVoteEventFilter;

    "ChangeSupportRequired(uint64)"(
      supportRequiredPct?: null
    ): ChangeSupportRequiredEventFilter;
    ChangeSupportRequired(
      supportRequiredPct?: null
    ): ChangeSupportRequiredEventFilter;

    "ChangeMinQuorum(uint64)"(
      minAcceptQuorumPct?: null
    ): ChangeMinQuorumEventFilter;
    ChangeMinQuorum(minAcceptQuorumPct?: null): ChangeMinQuorumEventFilter;

    "MinimumBalanceSet(uint256)"(
      minBalance?: null
    ): MinimumBalanceSetEventFilter;
    MinimumBalanceSet(minBalance?: null): MinimumBalanceSetEventFilter;

    "MinimumTimeSet(uint256)"(minTime?: null): MinimumTimeSetEventFilter;
    MinimumTimeSet(minTime?: null): MinimumTimeSetEventFilter;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    minTime(overrides?: CallOverrides): Promise<BigNumber>;

    votePct(
      _voteId: BigNumberish,
      _yeaPct: BigNumberish,
      _nayPct: BigNumberish,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCreateNewVote(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    lastCreateVoteTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    ENABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    minBalanceUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setMinTime(
      _minTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      _minBalance: BigNumberish,
      _minTime: BigNumberish,
      _minBalanceLowerLimit: BigNumberish,
      _minBalanceUpperLimit: BigNumberish,
      _minTimeLowerLimit: BigNumberish,
      _minTimeUpperLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    SET_MIN_BALANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeLowerLimit(overrides?: CallOverrides): Promise<BigNumber>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SET_MIN_TIME_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    minBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setMinBalance(
      _minBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    disableVoteCreationOnce(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    votesLength(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _voteData: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableVoteCreationOnce(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    minTimeUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minBalanceLowerLimit(overrides?: CallOverrides): Promise<BigNumber>;

    enableVoteCreation(overrides?: CallOverrides): Promise<BigNumber>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportRequiredPct(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    DISABLE_VOTE_CREATION(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votePct(
      _voteId: BigNumberish,
      _yeaPct: BigNumberish,
      _nayPct: BigNumberish,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canCreateNewVote(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MODIFY_QUORUM_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    MODIFY_SUPPORT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCreateVoteTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ENABLE_VOTE_CREATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBalanceUpperLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinTime(
      _minTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      _minBalance: BigNumberish,
      _minTime: BigNumberish,
      _minBalanceLowerLimit: BigNumberish,
      _minBalanceUpperLimit: BigNumberish,
      _minTimeLowerLimit: BigNumberish,
      _minTimeUpperLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    SET_MIN_BALANCE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minTimeLowerLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_MIN_TIME_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinBalance(
      _minBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    disableVoteCreationOnce(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    minAcceptQuorumPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _voteData: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableVoteCreationOnce(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    minTimeUpperLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBalanceLowerLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableVoteCreation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportRequiredPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DISABLE_VOTE_CREATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
